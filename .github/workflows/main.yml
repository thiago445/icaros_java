# Nome do workflow que aparecerá na aba "Actions" do GitHub
name: Build and Push Docker Image to ACR

# Gatilho: Roda automaticamente a cada 'push' na branch 'main' 
# e também permite que você o inicie manualmente (workflow_dispatch)
on:
  push:
    branches: ["main"]
  workflow_dispatch:

# Variáveis de ambiente para configurar facilmente
env:
  ACR_REGISTRY_NAME: icarosregisry # <--- Nome do seu registro (sem o 't')
  APP_IMAGE_NAME: minha-app      # <--- Nome que você quer dar para a imagem

jobs:
  # Nome do nosso único "job" (trabalho)
  build-and-push-to-acr:
    # A máquina virtual que o GitHub usará para rodar os comandos
    runs-on: ubuntu-latest
    
    # Passos que o job executará em sequência
    steps:
      # 1. Baixa o código do seu repositório para a máquina virtual
      - name: 'Check out repository code'
        uses: actions/checkout@v4

      # 2. Faz o login no seu Azure Container Registry (ACR)
      #    Usa os segredos corretos: ACR_USERNAME e ACR_PASSWORD
      - name: 'Log in to Azure Container Registry'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # 3. Constrói a imagem Docker e a envia (push) para o seu ACR
      #    Usa o seu arquivo Dockerfile como receita
      - name: 'Build and push Docker image to ACR'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # A "tag" é o nome completo da imagem no seu registro.
          # Exemplo: icarosregisry.azurecr.io/icaros-api:latest
          tags: ${{ env.ACR_REGISTRY_NAME }}.azurecr.io/${{ env.APP_IMAGE_NAME }}:latest